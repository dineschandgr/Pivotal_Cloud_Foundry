#Org
- Organization
- has different spaces

#Spaces
- an environment like DEV,QA,PROD


#CF CLI

#route

- maps the application to an URI
- routes should be globally unique
- multiple routes can be mapped to a single application

#CF Push Stages

1. Upload Package (combination of jar file and a manifest)

2. Staging - creation of droplet 
	- self contained unit to run on its own
	- Determine right build pack
	- Run the build pack to create a droplet
	- combination of source code and the run time
	
3. Deployment
	- Deployment of droplet into a cell
	- Cell is a virtual server

#buildpack

- a buildpack is needed to push to pcf
- java buildpack is downloaded by PCF
- Then a droplet is created and pushed to the server

#Application Manifest

- a config file to specify the build params to build the jar

- no need to specify the jar path and routes everytime


#WAR file

- to deploy a springboot application as war file, we need to
	1. exclude tomcat server in pom.xml
	2. extend SpringBootServletInitializer class and override configure method
	
#Services
- to bind to Databases,Queues etc frm application
- MySQL DB
- Eureka Naming Server


#PCF Spring Auto Configuration

- no need to specify mysql connection config in application.properties for Mysql DB running in PCF
- Spring Auto Configuration does this

1. it adds a cloud profile
2. It exposes Cloud Properties to app
3. It rewrites bean definitions to connecti with services bound to the app

Constraints

- Spring Auto Configuration would ignore our customizations
- In this case we need to do manual config with the 2 dependecies as commented in pom.xml

<artifactId>spring-cloud-cloudfoundry-connector</artifactId>
<artifactId>spring-cloud-spring-service-connector</artifactId>

- We can follow this approach for any service just by adding a bean
 
#Scaling
 
 - PCF has load balancer
 - The request goes to load balancer
 - From there it goes to GoRouter, where the route sends it to the cell
 - The App runs inside the cell
 - The app runs within a container
 
#Distributed Tracing

- PCF has distribution tracing. We just need to include Sleuth for that

#Autoscaling

- need to use App autoscaler CLI plugin

#API Gateway

- Authentication, authorization and security
- Rate Limits
- Fault Tolerance
- Service Aggregation

#Route Service

- Similar to API gateway
- to intercept calls to microservices

#BOSH

- BOSH outer shell
- Open Source Tool Chain
- Takes care of deployment of applications to cloud providers
- Bosh talks to cloud provider interface to deploy our applications with cloud providers

#Direct Communication between containers
- no need for service discovery

#Network policy
- enable communication between containers

#Deploying Docker Containers in PCF

-  We can dep,loy docker containers in PCF

#Blue Grren Deployments 

- Deploy Green version as a temp route
- Then route blue app to Green app
